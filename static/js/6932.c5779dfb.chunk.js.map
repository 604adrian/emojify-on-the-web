{"version":3,"file":"static/js/6932.c5779dfb.chunk.js","mappings":"uOASA,MA4EA,GA5EgBA,EAAAA,EAAAA,OAAK,SAAgBC,GAAoC,IAAnC,IAAEC,EAAG,OAAEC,EAAM,MAAEC,GAAiBH,EACpE,MAAOI,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAE/BC,EAAcN,EAAO,YAAc,aACzC,IAAIO,EAAQP,EAAOQ,IAAQP,GAAUO,IAAQP,GAAQ,GAEjDQ,EAAeN,EACf,CAAC,WAAY,gBAAgBO,KAAK,KAClC,CAAC,WAAY,iBAAiBA,KAAK,KAEnCC,EAAcX,EACd,CAAC,0BAA2B,qBAAqBU,KAAK,KACtD,CAAC,0BAA2B,wBAAwBA,KAAK,KAE7D,MAAME,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAYD,EAAAA,EAAAA,QAAO,OAEzBE,EAAAA,EAAAA,YAAU,KACJH,EAAUI,UACZC,EAAAA,EAAAA,IAAYL,EAAUI,QACxB,GACC,CAACJ,IAEJ,MAAMM,EC9BqBC,EAACC,EAAKC,KACjC,MAAOH,EAAYI,GAAiBC,EAAAA,cAAeC,GAsBnD,OApBAD,EAAAA,iBAAsB,KACpB,MAAM,QAAEP,GAAYI,EAEdK,EAAUA,KACd,MAAMC,EAAcV,EAAQW,YAAcX,EAAQY,YAElDN,EAAcI,GAEVL,GAAUA,EAASK,EAAY,EAGjCV,IACE,mBAAoBa,QACtB,IAAIC,eAAeL,GAASM,QAAQf,GAGtCS,IACF,GACC,CAACJ,EAAUD,IAEPF,CAAU,EDOEC,CAAcL,GAAYkB,QAC7C,IAAIC,GAAef,GAAegB,EAAAA,IAAa/B,EAA0B,GAAhB,cAEzD,OACEgC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACCC,EAAAA,EAAAA,KAAA,OACElB,IAAKR,EACL2B,MAAO,CAAEC,cAAc,GAADC,OAAKvB,GAAmBf,EAAN,IAAoB,MAC5DuC,UAAW,CAACjC,EAAaH,EAAY2B,EAAa,cAAcvB,KAAK,KAAK2B,SAExElC,GACGmC,EAAAA,EAAAA,KAAA,OAAKI,UAAW,CAAC,aAAc,OAAOhC,KAAK,KAAK2B,UAC9CC,EAAAA,EAAAA,KAAA,OAAAD,SAAO9B,OACT+B,EAAAA,EAAAA,KAAA,OACEI,UAAU,aAAatB,IAAKN,EAAUuB,SACpC9B,OAMRW,GAAcf,KAChBmC,EAAAA,EAAAA,KAAA,OAAKI,UAAW/B,EAAW0B,UACxBC,EAAAA,EAAAA,KAAA,UACEI,UAAS,GAAAD,OAAMP,EAAAA,GAA0B,iBAAf,cAC1BS,QAASA,IAAMvC,GAAWD,GAAQkC,SAE3BH,EAAAA,IASGI,EAAAA,EAAAA,KAACM,EAAAA,IAAiB,CAChBL,MAAO,CACLM,SAAU,WACVC,WAAY,mBACZC,UAAU,UAADN,OAAatC,EAAa,WAAJ,EAAc,KAC7C6C,WAAY,wCAbjBV,EAAAA,EAAAA,KAAA,QAAMW,MAAK,GAAAR,OAAMtC,EAAoB,WAAX,UAAyBkC,UACjDC,EAAAA,EAAAA,KAACY,EAAAA,IAAY,CACXX,MAAO,CACLM,SAAU,WACVC,WAAY,mBACZC,UAAU,UAADN,OAAYtC,EAAS,EAAI,WAAU,gBAkBtE,G","sources":["Components/TxtBoxAndExpand.js","detectOverflow.js"],"sourcesContent":["import { useState, memo, useRef, useEffect } from 'react'\nimport '../index.css';\nimport autoAnimate from '@formkit/auto-animate'\nimport toEmoji from 'emojification'\nimport { useIsOverflow } from '../detectOverflow.js'\nimport { isMobile } from 'react-device-detect'\nimport { IoIosArrowUp } from 'react-icons/io'\nimport { FaArrowCircleDown }  from 'react-icons/fa'\n\nconst TextBox = memo(function TextBox({ top, submit, count=undefined }) {\n  const [expand, setExpand] = useState(false)\n\n  const emojiStyle = (top) ? 'emoji-bor' : 'emoji-funk'\n  let text = (top) ? toEmoji(submit) : toEmoji(submit, true)\n\n  let txtBoxClass = (expand)\n    ? ['text-box', 'text-box-big'].join(' ')\n    : ['text-box', 'text-box-slim'].join(' ') \n\n  let areaForBtn = (top) \n    ? ['expand-button-container', 'expand-button-top'].join(' ')\n    : ['expand-button-container', 'expand-button-bottom'].join(' ')\n\n  const parentRef = useRef(null)\n  const expandRef = useRef(null)\n\n  useEffect(() => {\n    if (parentRef.current) {\n      autoAnimate(parentRef.current);\n    }\n  }, [parentRef])\n\n  const isOverflow = useIsOverflow(expandRef, (setIsOverflowFromCallback) => {});\n  let overflowing = (isOverflow && !isMobile && !expand) ? 'overflowing' : ''\n\n  return (\n    <>\n     <div \n       ref={parentRef}\n       style={{ gridColumnEnd: `${isOverflow ? '8' : expand ? '8': '9'}` }}\n       className={[txtBoxClass, emojiStyle, overflowing, 'emoji-text'].join(' ')}\n     >\n        {expand \n          ? <div className={['emoji-text', 'big'].join(' ')} >\n              <pre>{ text }</pre></div>\n          : <pre \n              className='emoji-text' ref={expandRef}>\n              { text }\n            </pre>\n        }\n      </div>\n\n\n      {(isOverflow || expand) &&\n      <div className={areaForBtn}>\n         <button \n           className={`${!isMobile ? 'expand-btn' : 'ios-expand-btn'}`}\n           onClick={() => setExpand(!expand)}\n          >\n                {!isMobile\n                  ? <abbr title={`${!expand ? 'Expand' : 'Minimize' }`}>\n                      <IoIosArrowUp \n                        style={{ \n                          position: 'relative',\n                          transition: \"all 0.2s ease-in\",\n                          transform: `rotate(${expand ? 0 : '-0.5turn'})`,\n                        }} />\n                    </abbr>\n                   : <FaArrowCircleDown\n                       style={{ \n                         position: 'relative',\n                         transition: \"all 0.2s ease-in\",\n                         transform: `rotate(${!expand ? 0 : '-0.5turn'})`,\n                         textShadow: \"0px 0px 2px black, 0 0 15px white\"\n                       }} \n                     />\n                    }\n         </button>\n        </div>\n       }\n\n    </>\n  )\n})\n\nexport default TextBox\n","import * as React from 'react'\n\nexport const useIsOverflow = (ref, callback) => {\n  const [isOverflow, setIsOverflow] = React.useState(undefined);\n\n  React.useLayoutEffect(() => {\n    const { current } = ref;\n\n    const trigger = () => {\n      const hasOverflow = current.scrollWidth > current.clientWidth;\n\n      setIsOverflow(hasOverflow);\n\n      if (callback) callback(hasOverflow);\n    };\n\n    if (current) {\n      if ('ResizeObserver' in window) {\n        new ResizeObserver(trigger).observe(current);\n      }\n\n      trigger();\n    }\n  }, [callback, ref])\n\n  return isOverflow;\n};\n"],"names":["memo","_ref","top","submit","count","expand","setExpand","useState","emojiStyle","text","toEmoji","txtBoxClass","join","areaForBtn","parentRef","useRef","expandRef","useEffect","current","autoAnimate","isOverflow","useIsOverflow","ref","callback","setIsOverflow","React","undefined","trigger","hasOverflow","scrollWidth","clientWidth","window","ResizeObserver","observe","setIsOverflowFromCallback","overflowing","isMobile","_jsxs","_Fragment","children","_jsx","style","gridColumnEnd","concat","className","onClick","FaArrowCircleDown","position","transition","transform","textShadow","title","IoIosArrowUp"],"sourceRoot":""}